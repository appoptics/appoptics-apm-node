#
# supporting backends for node-appoptics testing
#
version: '2.1'

# run with:
# > docker-compose run --service-ports --rm --name node_main node_main /bin/bash

services:
  node_main:
    container_name: node_main
    image: node_main
    build:
      context: ../
      dockerfile: main.yml
      args:
        # if AO_TEST_PACKAGE and AO_TEST_GITAUTH are not set then the
        # bindings installation will attempt to download the HEAD of the
        # master branch from the public repository.
        #
        # expect librato/node-appoptics-bindings#new-liboboe while private
        - AO_TEST_PACKAGE
        # expect a git auth token (or extend Dockerfile with user and password)
        - AO_TEST_GITAUTH
        # - AO_TEST_GITUSER
        # - AO_TEST_GITPASS
        # - AO_TEST_COLLECTOR_CERT=${AO_COLLECTOR_CERT:-test/certs/scribe-collector.crt}
        - AO_TEST_COLLECTOR_CERT=${AO_COLLECTOR_CERT:-test/certs/java-collector.crt}
        # - AO_TEST_COLLECTOR=${AO_COLLECTOR:-scribe-collector:4444}
        - AO_TEST_COLLECTOR=${APPOPTICS_COLLECTOR:-java-collector:12222}
        # the next two set liboboe to send to the mock collector
        # for testing. these should be set to run the test suite.
        - AO_TEST_REPORTER=udp
        - AO_TEST_REPORTER_UDP=localhost:7832
    volumes:
      # map the top node directory to the /appoptics/ directory
      - "${PWD}/../../..:/appoptics/"
    working_dir: /appoptics
    environment:
      AO_TOKEN_STG: ${AO_TOKEN_STG}
      AO_SERVICE_NAME: ${AO_SERVICE_NAME}
      AO_TEST_CASSANDRA_2_2: cassandra:9042
      AO_TEST_MEMCACHED_1_4: memcached:11211
      AO_TEST_MONGODB_2_4: mongo_2_4:27017
      AO_TEST_MONGODB_2_6: mongo_2_6:27017
      AO_TEST_MONGODB_3_0: mongo_3_0:27017
      AO_TEST_MYSQL: mysql:3306
      AO_TEST_POSTGRES: postgres:5432
      AO_TEST_SQLSERVER_EX: mssql:1433
      AO_TEST_RABBITMQ_3_5: rabbitmq:5672
      AO_TEST_REDIS_3_0: redis:6379
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "9229:9229"
#    #
#    # wait for the dependencies. (this container doesn't really do anything unless
#    # running the tests in this context. in that case it is easy enough to invoke
#    # env.sh manually as that is the way the tests are run.)
#    #
    depends_on:
      - wait
    links:
      - wait

  #
  # extend the collector services into this composition.
  # NOTE: extend goes away in version 3.0 of docker-compose.yml
  #
  # undocumented low-level internal testing tools
  # requires copying ../oboe-test/collectors/<collector-name>/<name>.crt
  # to test/certs/<collector-name>.crt
  #
  #scribe-collector:
  #  extends:
  #    file: "../oboe-test/collectors/docker-compose.yml"
  #    service: "scribe-collector"
  #java-collector:
  #  extends:
  #    file: "../oboe-test/collectors/docker-compose.yml"
  #    service: "java-collector"

  #
  # Not used with appoptics.
  #
  #tracelyzer:
  #  extends:
  #    file: "../oboe-test/collectors/docker-compose.yml"
  #    service: "tracelyzer"
  #logalyzer:
  #   build:
  #    context: test/docker
  #    dockerfile: logalyzer.yml


  #
  # Containers required for testing supported probes. Each
  # depends on a dockerfile in test/docker/ that specifies
  # the correct image.
  #
  cassandra:
    container_name: "node_cassandra"
    image: "cassandra"
    build:
      context: ../
      dockerfile: cassandra.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      # host:container
      - "9042:9042"

  memcached:
    container_name: "node_memcached"
    image: "memcached"
    build:
      context: ../
      dockerfile: memcached.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "11211:11211"


  mongo_2_4:
    container_name: "node_mongo_2_4"
    image: "mongo_2_4"
    build:
      context: ../
      dockerfile: mongo_2_4.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      # host:container
      - "27016:27017"

  mongo_2_6:
    container_name: "node_mongo_2_6"
    image: "mongo_2_6"
    build:
      context: ../
      dockerfile: mongo_2_6.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "${AO_TEST_MONGO_2_6_HOST_PORT:-27017}:27017"

  mongo_3_0:
    container_name: "node_mongo_3_0"
    image: "mongo_3_0"
    build:
      context: ../
      dockerfile: mongo_3_0.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "27018:27017"

#  mongo_replset:
#    image: "traceqa/mongo-set"
#    build:
#      context: ../
#      dockerfile: mongo_replset.yml
#    logging:
#      options:
#        max-file: "1"
#        max-size: 50m
#    ports:
#      - "30001:30001"
#      - "30002:30002"
#      - "30003:30003"
#    environment:
#      - "REPLSETMEMBERS=3"
#      - "REPLSETHOST=localhost"

  mysql:
    container_name: "node_mysql_5_7"
    image: "mysql:5.7.13"
    environment:
      - MYSQL_ROOT_PASSWORD=admin
    ports:
      - "${AO_TEST_MYSQL_HOST_PORT:-3306}:3306"

  mssql:
    container_name: "node_mssql"
    image: "mssql"
    build:
      context: ../
      dockerfile: mssql.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "1433:1433"

  oracle:
    container_name: "node_oracle"
    image: "oracle"
    build:
      context: ../
      dockerfile: oracle.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "1521:1521"

  postgres:
    container_name: "node_postgres"
    image: "postgres"
    build:
      context: ../
      dockerfile: postgres.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "5432:5432"
    environment:
      # sets password to this so make pg.test.js agree
      - POSTGRES_PASSWORD=xyzzy

  rabbitmq:
    container_name: "node_rabbitmq"
    image: rabbitmq:3-management
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "5672:5672"
      - "5671:5671"

  redis:
    container_name: "node_redis"
    image: "redis"
    build:
      context: ../
      dockerfile: redis.yml
    logging:
      options:
        max-file: "1"
        max-size: 50m
    ports:
      - "6379:6379"

  wait:
    container_name: "node_wait"
    image: waisbrot/wait
    depends_on:
      - cassandra
      - memcached
      - mongo_2_4
      - mongo_2_6
      - mongo_3_0
      - mssql
      - mysql
      - postgres
      - rabbitmq
      - redis
    links:
      - cassandra
      - memcached
      - mongo_2_4
      - mongo_2_6
      - mongo_3_0
      - mssql
      - mysql
      - postgres
      - rabbitmq
      - redis
    environment:
      - TARGETS=cassandra:9042;memcached:11211;mongo:27017;mssql:1433;mysql:3306;postgres:5432;rabbitmq:5672;redis:6379

